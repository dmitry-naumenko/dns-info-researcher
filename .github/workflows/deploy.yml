name: Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: dnau/dns-info-researcher
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  TITLE: ${{ secrets.TITLE }}
  APP_ENV: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Setup Python
        uses: actions/setup-python@v2.3.2
        with:
          python-version: 3.9.7
      - name: Install dependencies
        run: |
          pip install -r requirements/local.txt
      - name: lint
        run: |
          chmod +x "${GITHUB_WORKSPACE}/scripts/lint.sh"
          "${GITHUB_WORKSPACE}/scripts/lint.sh"
      - name: test
        run: |
          chmod +x "${GITHUB_WORKSPACE}/scripts/test.sh"
          "${GITHUB_WORKSPACE}/scripts/test.sh"
      - name: test_cov
        run: |
          chmod +x "${GITHUB_WORKSPACE}/scripts/test_cov.sh"
          "${GITHUB_WORKSPACE}/scripts/test_cov.sh"

  build:
    name: Build Container
    needs: test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.4.0

      - name: Build image and publish to registry
        run: |
          docker build -t $IMAGE_NAME:latest . -f ./compose/production/fastapi/Dockerfile
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
          docker push $IMAGE_NAME:latest
  deploy:
    name: Deploy
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Deploy service over ssh
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          TITLE: ${{ secrets.TITLE }}
        run: |
          which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
          eval $(ssh-agent -s)
          echo "add ssh key"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $SSH_USER@$SSH_HOST "
            docker pull $IMAGE_NAME && \
            (docker rm -f frw_backend || true) && \
            docker run -d \
              --name frw_backend \
              --restart always \
              --network host \
              -e TITLE=\"$TITLE\" \
              $IMAGE_NAME"
